{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Theoretical Basis: Projectile Motion 1. Motion of a Projectile When a projectile (such as a ball, bullet, or rocket) is launched at an angle to the horizontal, it follows a parabolic trajectory. This occurs due to two forces: The horizontal velocity remains constant (if we don't take air resistance). The vertical velocity changes due to gravity. Key Equations of Motion Horizontal coordinate (x): $$ x = v_0 \\cos(\\theta) t $$ where: - \\(v_0\\) is the initial velocity, - \\(\\theta\\) is the launch angle, - \\(t\\) is the time. Vertical coordinate (y): \\[ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 \\] where: - \\(g\\) is the acceleration due to gravity (typically \\(9.81 \\text{ m/s}^2\\) ). and therefore our graph will be parabola and look like this: 2. Differential Equations with Air Resistance Modified equations (b = 0.1): When air resistance (drag force proportional to velocity) is included: Modified equations (b = 0.1): $$ m{x}'' = -b{x}' \\ $$ \\[ m{y}'' = -mg - b{y}' \\] First-order system: 1. Horizontal: $$ {x}' = v_x \\ $$ \\[ {v}_x' = {x}'' = -\\frac{b}{m}v_x \\] Vertical: $$ {y}' = v_y \\ $$ \\[ {v}_y' = {y}'' = -g - \\frac{b}{m}v_y \\] 3. Analytical Solution with Air Resistance When air resistance is considered, the equations of motion become more complex. The drag force opposes the motion and is typically proportional to the velocity (for low speeds). The analytical solutions for horizontal x(t) and vertical y(t) positions are: Horizontal position: \\[ x(t) = \\frac{v_0 \\cos(\\theta)} m b \\left(1 - e^{-\\frac{b}{m} t}\\right) \\] where: - \\(b\\) is the drag coefficient, - \\(m\\) is the mass of the projectile. Vertical position: \\[ y(t) = \\left(\\frac{v_0 \\sin(\\theta) m}{b} + \\frac{m^2 g}{b^2}\\right) \\left(1 - e^{-\\frac{b}{m} t}\\right) - \\frac{mg}{b} t \\] where: The horizontal motion is no longer linear due to the exponential decay term. The vertical motion includes a terminal velocity term ( \\(\\frac{mg}{b}\\) ) as \\(t \\to \\infty\\) . Trajectory Equation (y as function of x) By solving the x(t) equation for t and substituting into y(t), we get the trajectory equation: $$ y(x) = \\left(\\frac{mg}{b v_{0x}} + \\frac{v_{0y}}{v_{0x}}\\right)x + \\frac{m^2g}{b^2}\\ln\\left(1 - \\frac{b x}{m v_{0x}}\\right) $$ and now, with air resistance, our graph will look like this: 4. Python code for simulation Also, to better understand projectile motion, I wrote a Python script that simulates and visualizes the trajectory of our projectile. The script plots the parabolic path of a projectile based on different launch angles and initial velocities, which you can write by yourself. It uses the matplotlib and numpy libraries to generate the graphs. Here is the code: import numpy as np import matplotlib.pyplot as plt def calculate_trajectory(v0, angle, g=9.81, b=0.1, with_air=False): angle_rad = np.radians(angle) if not with_air: t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 else: def y_func(t): return (v0*np.sin(angle_rad) + g/b)*(1-np.exp(-b*t))/b - g*t/b t_flight = 0 dt = 0.01 while y_func(t_flight) >= 0: t_flight += dt t = np.linspace(0, t_flight, 100) x = (v0 * np.cos(angle_rad) * (1 - np.exp(-b*t))) / b y = y_func(t) return x, y v0 = float(input(\"Enter initial velocity (m/s): \")) angles = list(map(float, input(\"Enter angles (degrees, space-separated): \").split())) plt.figure(figsize=(10, 6)) for angle in angles: x, y = calculate_trajectory(v0, angle, with_air=False) plt.plot(x, y, label=f'{angle}\u00b0 (no air)') x_air, y_air = calculate_trajectory(v0, angle, with_air=True) plt.plot(x_air, y_air, '--', label=f'{angle}\u00b0 (with air)') plt.title(f'Projectile Trajectories (v0 = {v0} m/s)') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.axhline(0, color='black', linestyle='-', linewidth=0.5) plt.legend() plt.grid(True) plt.show() This code creates a graph that shows the trajectory of a projectile, with and without air resistance, when launched from different angles and with different initial speeds, you can enter these values \u200b\u200byourself. Also on this graph are 2 axes, distance and height, which show us exactly how high and far the projectile flew, here is the graph: and also one additional (opposite) python code where you write only one angle, but more than one starting velocity: import numpy as np import matplotlib.pyplot as plt def calculate_trajectory(v0, angle, g=9.81, b=0.1, with_air=False): angle_rad = np.radians(angle) if not with_air: t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 else: def y_func(t): return (v0*np.sin(angle_rad) + g/b)*(1-np.exp(-b*t))/b - g*t/b t_flight = 0 dt = 0.01 while y_func(t_flight) >= 0: t_flight += dt t = np.linspace(0, t_flight, 100) x = (v0 * np.cos(angle_rad) * (1 - np.exp(-b*t))) / b y = y_func(t) return x, y angle = float(input(\"Enter angle (degrees): \")) v0_list = list(map(float, input(\"Enter initial velocities (m/s, space-separated): \").split())) plt.figure(figsize=(10, 6)) for v0 in v0_list: x, y = calculate_trajectory(v0, angle, with_air=False) plt.plot(x, y, label=f'v0={v0} m/s (no air)') x_air, y_air = calculate_trajectory(v0, angle, with_air=True) plt.plot(x_air, y_air, '--', label=f'v0={v0} m/s (with air)') plt.title(f'Projectile Trajectories (angle = {angle}\u00b0)') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.axhline(0, color='black', linestyle='-', linewidth=0.5) plt.legend() plt.grid(True) plt.show() and here is the graph: 5. Brief description, how this code works This code simulates and plots projectile trajectories with and without air resistance. Here's a brief breakdown: 1.Function calculate_trajectory: Computes the x (horizontal) and y (vertical) positions of a projectile over time. Without air resistance: Uses basic kinematic equations for projectile motion. With air resistance: Uses more complex equations accounting for drag (exponential decay terms). Determines flight time differently for each case. 2.User Input: Takes initial velocity (v0) and multiple launch angles as input. 3.Plotting: For each angle, calculates and plots two trajectories: Solid line: No air resistance (ideal case) Dashed line: With air resistance (more realistic) Adds labels, grid, and other plot decorations. The key difference is that air resistance reduces the projectile's range and height, which is clearly visible in the plotted trajectories. The code allows comparison between ideal and air-resistant motion for multiple angles simultaneously. Google Colab Link (with Python code): MyColab","title":"Theoretical Basis: Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-basis-projectile-motion","text":"","title":"Theoretical Basis: Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-motion-of-a-projectile","text":"When a projectile (such as a ball, bullet, or rocket) is launched at an angle to the horizontal, it follows a parabolic trajectory. This occurs due to two forces: The horizontal velocity remains constant (if we don't take air resistance). The vertical velocity changes due to gravity.","title":"1. Motion of a Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-equations-of-motion","text":"","title":"Key Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-coordinate-x","text":"$$ x = v_0 \\cos(\\theta) t $$ where: - \\(v_0\\) is the initial velocity, - \\(\\theta\\) is the launch angle, - \\(t\\) is the time.","title":"Horizontal coordinate (x):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-coordinate-y","text":"\\[ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 \\] where: - \\(g\\) is the acceleration due to gravity (typically \\(9.81 \\text{ m/s}^2\\) ). and therefore our graph will be parabola and look like this:","title":"Vertical coordinate (y):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-differential-equations-with-air-resistance","text":"Modified equations (b = 0.1): When air resistance (drag force proportional to velocity) is included: Modified equations (b = 0.1): $$ m{x}'' = -b{x}' \\ $$ \\[ m{y}'' = -mg - b{y}' \\] First-order system: 1. Horizontal: $$ {x}' = v_x \\ $$ \\[ {v}_x' = {x}'' = -\\frac{b}{m}v_x \\] Vertical: $$ {y}' = v_y \\ $$ \\[ {v}_y' = {y}'' = -g - \\frac{b}{m}v_y \\]","title":"2. Differential Equations with Air Resistance"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-analytical-solution-with-air-resistance","text":"When air resistance is considered, the equations of motion become more complex. The drag force opposes the motion and is typically proportional to the velocity (for low speeds). The analytical solutions for horizontal x(t) and vertical y(t) positions are:","title":"3. Analytical Solution with Air Resistance"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-position","text":"\\[ x(t) = \\frac{v_0 \\cos(\\theta)} m b \\left(1 - e^{-\\frac{b}{m} t}\\right) \\] where: - \\(b\\) is the drag coefficient, - \\(m\\) is the mass of the projectile.","title":"Horizontal position:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-position","text":"\\[ y(t) = \\left(\\frac{v_0 \\sin(\\theta) m}{b} + \\frac{m^2 g}{b^2}\\right) \\left(1 - e^{-\\frac{b}{m} t}\\right) - \\frac{mg}{b} t \\] where: The horizontal motion is no longer linear due to the exponential decay term. The vertical motion includes a terminal velocity term ( \\(\\frac{mg}{b}\\) ) as \\(t \\to \\infty\\) .","title":"Vertical position:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#trajectory-equation-y-as-function-of-x","text":"By solving the x(t) equation for t and substituting into y(t), we get the trajectory equation: $$ y(x) = \\left(\\frac{mg}{b v_{0x}} + \\frac{v_{0y}}{v_{0x}}\\right)x + \\frac{m^2g}{b^2}\\ln\\left(1 - \\frac{b x}{m v_{0x}}\\right) $$ and now, with air resistance, our graph will look like this:","title":"Trajectory Equation (y as function of x)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-python-code-for-simulation","text":"Also, to better understand projectile motion, I wrote a Python script that simulates and visualizes the trajectory of our projectile. The script plots the parabolic path of a projectile based on different launch angles and initial velocities, which you can write by yourself. It uses the matplotlib and numpy libraries to generate the graphs. Here is the code: import numpy as np import matplotlib.pyplot as plt def calculate_trajectory(v0, angle, g=9.81, b=0.1, with_air=False): angle_rad = np.radians(angle) if not with_air: t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 else: def y_func(t): return (v0*np.sin(angle_rad) + g/b)*(1-np.exp(-b*t))/b - g*t/b t_flight = 0 dt = 0.01 while y_func(t_flight) >= 0: t_flight += dt t = np.linspace(0, t_flight, 100) x = (v0 * np.cos(angle_rad) * (1 - np.exp(-b*t))) / b y = y_func(t) return x, y v0 = float(input(\"Enter initial velocity (m/s): \")) angles = list(map(float, input(\"Enter angles (degrees, space-separated): \").split())) plt.figure(figsize=(10, 6)) for angle in angles: x, y = calculate_trajectory(v0, angle, with_air=False) plt.plot(x, y, label=f'{angle}\u00b0 (no air)') x_air, y_air = calculate_trajectory(v0, angle, with_air=True) plt.plot(x_air, y_air, '--', label=f'{angle}\u00b0 (with air)') plt.title(f'Projectile Trajectories (v0 = {v0} m/s)') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.axhline(0, color='black', linestyle='-', linewidth=0.5) plt.legend() plt.grid(True) plt.show() This code creates a graph that shows the trajectory of a projectile, with and without air resistance, when launched from different angles and with different initial speeds, you can enter these values \u200b\u200byourself. Also on this graph are 2 axes, distance and height, which show us exactly how high and far the projectile flew, here is the graph: and also one additional (opposite) python code where you write only one angle, but more than one starting velocity: import numpy as np import matplotlib.pyplot as plt def calculate_trajectory(v0, angle, g=9.81, b=0.1, with_air=False): angle_rad = np.radians(angle) if not with_air: t_flight = 2 * v0 * np.sin(angle_rad) / g t = np.linspace(0, t_flight, 100) x = v0 * np.cos(angle_rad) * t y = v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 else: def y_func(t): return (v0*np.sin(angle_rad) + g/b)*(1-np.exp(-b*t))/b - g*t/b t_flight = 0 dt = 0.01 while y_func(t_flight) >= 0: t_flight += dt t = np.linspace(0, t_flight, 100) x = (v0 * np.cos(angle_rad) * (1 - np.exp(-b*t))) / b y = y_func(t) return x, y angle = float(input(\"Enter angle (degrees): \")) v0_list = list(map(float, input(\"Enter initial velocities (m/s, space-separated): \").split())) plt.figure(figsize=(10, 6)) for v0 in v0_list: x, y = calculate_trajectory(v0, angle, with_air=False) plt.plot(x, y, label=f'v0={v0} m/s (no air)') x_air, y_air = calculate_trajectory(v0, angle, with_air=True) plt.plot(x_air, y_air, '--', label=f'v0={v0} m/s (with air)') plt.title(f'Projectile Trajectories (angle = {angle}\u00b0)') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.axhline(0, color='black', linestyle='-', linewidth=0.5) plt.legend() plt.grid(True) plt.show() and here is the graph:","title":"4. Python code for simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-brief-description-how-this-code-works","text":"This code simulates and plots projectile trajectories with and without air resistance. Here's a brief breakdown:","title":"5. Brief description, how this code works"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1function-calculate_trajectory","text":"Computes the x (horizontal) and y (vertical) positions of a projectile over time. Without air resistance: Uses basic kinematic equations for projectile motion. With air resistance: Uses more complex equations accounting for drag (exponential decay terms). Determines flight time differently for each case.","title":"1.Function calculate_trajectory:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2user-input","text":"Takes initial velocity (v0) and multiple launch angles as input.","title":"2.User Input:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3plotting","text":"For each angle, calculates and plots two trajectories: Solid line: No air resistance (ideal case) Dashed line: With air resistance (more realistic) Adds labels, grid, and other plot decorations. The key difference is that air resistance reduces the projectile's range and height, which is clearly visible in the plotted trajectories. The code allows comparison between ideal and air-resistant motion for multiple angles simultaneously.","title":"3.Plotting:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#google-colab-link-with-python-code","text":"MyColab","title":"Google Colab Link (with Python code):"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation We start from the general second-order differential equation for a forced damped pendulum: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A\\cos(\\omega_{\\text{drive}} t) \\] where: \\(\\theta(t)\\) is the angular displacement, \\(b\\) is the damping coefficient, \\(\\omega_0\\) is the natural frequency ( \\(\\omega_0\\) = \\(\\sqrt{g/L}\\) ), \\(A\\) is the amplitude of the external driving force, \\(\\omega_{\\text{drive}}\\) is the driving frequency. Small-Angle Approximation For small oscillations ( \\(\\theta \\approx \\sin\\theta\\) ), the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A\\cos(\\omega_{\\text{drive}} t) \\] This is now a linear second-order differential equation. Approximate Solution for Small Oscillations In steady state: \\[ \\theta(t) = \\theta_0 \\cos(\\omega_{\\text{drive}} t - \\delta) \\] Amplitude: \\[ \\theta_0 = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega_{\\text{drive}}^2)^2 + (b\\omega_{\\text{drive}})^2}} \\] Resonance Condition Resonance occurs at: \\[ \\omega_{\\text{drive}} \\approx \\sqrt{\\omega_0^2 - \\frac{b^2}{2}} \\] At resonance, small driving forces produce large oscillations. 2. Analysis of Dynamics Influence of Parameters Damping \\(b\\) reduces oscillation amplitudes and flattens resonance curves. Driving amplitude \\(A\\) increases overall energy input. Driving frequency \\(\\omega_{\\text{drive}}\\) controls resonance, synchronization, or chaos. Transition to Chaos For strong forcing and nonlinearity, pendulum exhibits chaotic behavior : No periodicity, Extreme sensitivity to initial conditions, Complex strange attractors. Here is the plot showing transition from regular to chaotic motion as A increases: 3. Practical Applications The forced damped pendulum model applies to: Energy harvesting (vibration-based generators), Suspension bridges (periodic forces from wind, pedestrians), Oscillating circuits (driven RLC circuits in electronics), Biomechanics (leg dynamics during walking/running). Here is an very simple example of real-world forced damped pendulum: 4. Implementation We simulate the forced damped pendulum numerically (using Runge-Kutta method). The equations: \\[ \\frac{d\\theta}{dt} = \\omega \\] \\[ \\frac{d\\omega}{dt} = -b\\omega - \\omega_0^2 \\sin(\\theta) + A\\cos(\\omega_{\\text{drive}}t) \\] Simulations and Visualizations Simple Pendulum (No Damping, No Forcing) Damped Pendulum (Damping, No Forcing) Forced Pendulum (Forcing, No Damping) Forced Damped Pendulum (Chaos Examples) Scenario 1: Moderate damping and forcing Scenario 2: Strong forcing (possible resonance/chaos) Python Code for Simulations import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity L = 1.0 # length omega0 = np.sqrt(g / L) # System of ODEs def pendulum(t, y, b, omega0, A, omega_drive): theta, omega = y dydt = [omega, -b*omega - omega0**2 * np.sin(theta) + A*np.cos(omega_drive*t)] return dydt # Simulation function def simulate_pendulum(b, A, omega_drive, y0=[0.2, 0.0], t_span=(0,100), num_points=5000): t_eval = np.linspace(t_span[0], t_span[1], num_points) sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval, args=(b, omega0, A, omega_drive)) return sol.t, sol.y[0], sol.y[1] # Example of plotting def plot_simulation(b, A, omega_drive, title): t, theta, omega = simulate_pendulum(b, A, omega_drive) fig, axs = plt.subplots(1, 2, figsize=(12,5)) axs[0].plot(t, theta) axs[0].set_title('Angle vs Time') axs[0].set_xlabel('Time (s)') axs[0].set_ylabel('Angle (rad)') axs[1].plot(theta, omega) axs[1].set_title('Phase Portrait') axs[1].set_xlabel('Angle (rad)') axs[1].set_ylabel('Angular Velocity (rad/s)') fig.suptitle(title) plt.tight_layout() plt.show() # Simulations plot_simulation(b=0.0, A=0.0, omega_drive=2/3, title='Simple Pendulum') plot_simulation(b=0.1, A=0.0, omega_drive=2/3, title='Damped Pendulum') plot_simulation(b=0.0, A=1.2, omega_drive=2/3, title='Forced Pendulum') plot_simulation(b=0.1, A=1.2, omega_drive=2/3, title='Forced Damped Pendulum - Moderate Chaos') plot_simulation(b=0.2, A=1.5, omega_drive=2/3, title='Forced Damped Pendulum - Strong Chaos') Deliverables Summary Full theoretical explanations Systematic graphical placeholders Full working Python code Real-world application discussion Preparation for detailed plotting: phase portraits, Poincar\u00e9 sections Google Colab Link (with Python code): MyColab","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"We start from the general second-order differential equation for a forced damped pendulum: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A\\cos(\\omega_{\\text{drive}} t) \\] where: \\(\\theta(t)\\) is the angular displacement, \\(b\\) is the damping coefficient, \\(\\omega_0\\) is the natural frequency ( \\(\\omega_0\\) = \\(\\sqrt{g/L}\\) ), \\(A\\) is the amplitude of the external driving force, \\(\\omega_{\\text{drive}}\\) is the driving frequency.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small oscillations ( \\(\\theta \\approx \\sin\\theta\\) ), the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A\\cos(\\omega_{\\text{drive}} t) \\] This is now a linear second-order differential equation.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#approximate-solution-for-small-oscillations","text":"In steady state: \\[ \\theta(t) = \\theta_0 \\cos(\\omega_{\\text{drive}} t - \\delta) \\] Amplitude: \\[ \\theta_0 = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega_{\\text{drive}}^2)^2 + (b\\omega_{\\text{drive}})^2}} \\]","title":"Approximate Solution for Small Oscillations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs at: \\[ \\omega_{\\text{drive}} \\approx \\sqrt{\\omega_0^2 - \\frac{b^2}{2}} \\] At resonance, small driving forces produce large oscillations.","title":"Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#influence-of-parameters","text":"Damping \\(b\\) reduces oscillation amplitudes and flattens resonance curves. Driving amplitude \\(A\\) increases overall energy input. Driving frequency \\(\\omega_{\\text{drive}}\\) controls resonance, synchronization, or chaos.","title":"Influence of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"For strong forcing and nonlinearity, pendulum exhibits chaotic behavior : No periodicity, Extreme sensitivity to initial conditions, Complex strange attractors. Here is the plot showing transition from regular to chaotic motion as A increases:","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_1","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum model applies to: Energy harvesting (vibration-based generators), Suspension bridges (periodic forces from wind, pedestrians), Oscillating circuits (driven RLC circuits in electronics), Biomechanics (leg dynamics during walking/running). Here is an very simple example of real-world forced damped pendulum:","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"We simulate the forced damped pendulum numerically (using Runge-Kutta method). The equations: \\[ \\frac{d\\theta}{dt} = \\omega \\] \\[ \\frac{d\\omega}{dt} = -b\\omega - \\omega_0^2 \\sin(\\theta) + A\\cos(\\omega_{\\text{drive}}t) \\]","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#simulations-and-visualizations","text":"","title":"Simulations and Visualizations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#simple-pendulum-no-damping-no-forcing","text":"","title":"Simple Pendulum (No Damping, No Forcing)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#damped-pendulum-damping-no-forcing","text":"","title":"Damped Pendulum (Damping, No Forcing)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-pendulum-forcing-no-damping","text":"","title":"Forced Pendulum (Forcing, No Damping)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-chaos-examples","text":"Scenario 1: Moderate damping and forcing Scenario 2: Strong forcing (possible resonance/chaos)","title":"Forced Damped Pendulum (Chaos Examples)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-code-for-simulations","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravity L = 1.0 # length omega0 = np.sqrt(g / L) # System of ODEs def pendulum(t, y, b, omega0, A, omega_drive): theta, omega = y dydt = [omega, -b*omega - omega0**2 * np.sin(theta) + A*np.cos(omega_drive*t)] return dydt # Simulation function def simulate_pendulum(b, A, omega_drive, y0=[0.2, 0.0], t_span=(0,100), num_points=5000): t_eval = np.linspace(t_span[0], t_span[1], num_points) sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval, args=(b, omega0, A, omega_drive)) return sol.t, sol.y[0], sol.y[1] # Example of plotting def plot_simulation(b, A, omega_drive, title): t, theta, omega = simulate_pendulum(b, A, omega_drive) fig, axs = plt.subplots(1, 2, figsize=(12,5)) axs[0].plot(t, theta) axs[0].set_title('Angle vs Time') axs[0].set_xlabel('Time (s)') axs[0].set_ylabel('Angle (rad)') axs[1].plot(theta, omega) axs[1].set_title('Phase Portrait') axs[1].set_xlabel('Angle (rad)') axs[1].set_ylabel('Angular Velocity (rad/s)') fig.suptitle(title) plt.tight_layout() plt.show() # Simulations plot_simulation(b=0.0, A=0.0, omega_drive=2/3, title='Simple Pendulum') plot_simulation(b=0.1, A=0.0, omega_drive=2/3, title='Damped Pendulum') plot_simulation(b=0.0, A=1.2, omega_drive=2/3, title='Forced Pendulum') plot_simulation(b=0.1, A=1.2, omega_drive=2/3, title='Forced Damped Pendulum - Moderate Chaos') plot_simulation(b=0.2, A=1.5, omega_drive=2/3, title='Forced Damped Pendulum - Strong Chaos')","title":"Python Code for Simulations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#deliverables-summary","text":"Full theoretical explanations Systematic graphical placeholders Full working Python code Real-world application discussion Preparation for detailed plotting: phase portraits, Poincar\u00e9 sections","title":"Deliverables Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#google-colab-link-with-python-code","text":"MyColab","title":"Google Colab Link (with Python code):"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}