{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Theoretical Basis: Projectile Motion 1. Motion of a Projectile When a projectile (such as a ball, bullet, or rocket) is launched at an angle to the horizontal, it follows a parabolic trajectory. This occurs due to two forces: The horizontal velocity remains constant (if we don't take air resistance). The vertical velocity changes due to gravity. Key Equations of Motion Horizontal coordinate (x): $$ x = v_0 \\cos(\\theta) t $$ where: - \\(v_0\\) is the initial velocity, - \\(\\theta\\) is the launch angle, - \\(t\\) is the time. Vertical coordinate (y): \\[ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 \\] where: - \\(g\\) is the acceleration due to gravity (typically \\(9.81 \\text{ m/s}^2\\) ). 2. Range of Flight (R) The range is the horizontal distance traveled by the projectile before it lands. To find the range, we first determine the flight time (T), which is the time it takes for the projectile to return to the ground ( \\(y = 0\\) ): $$ T = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Now, substituting \\(T\\) into the equation for \\(x\\) : $$ R = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} $$ Using the trigonometric identity \\(2 \\sin(\\theta) \\cos(\\theta) = \\sin(2\\theta)\\) , we get: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ 3. Range Analysis Based on Angle From the equation, we observe: Maximum range is achieved at \\(\\theta = 45^\\circ\\) , since \\(\\sin(2\\theta) = 1\\) . If the angle is too small ( \\(\\theta \\approx 0^\\circ\\) ), the projectile moves almost straight and falls nearby. If the angle is too large ( \\(\\theta \\approx 90^\\circ\\) ), the projectile moves mostly upward and lands almost at the launch point. 4. Python code for simulation Also, to better understand projectile motion, I wrote a Python script that simulates and visualizes the trajectory of our projectile. The script plots the parabolic path of a projectile based on different launch angles and initial velocities, which you can write by yourself. It uses the matplotlib and numpy libraries to generate the graphs. Here is the code: import numpy as np import matplotlib.pyplot as plt def draw_trajectories(angles, initial_velocity, g): plt.figure(figsize=(10, 5)) for angle in angles: angle_rad = np.radians(angle) time_of_flight = (2 * (initial_velocity * np.sin(angle_rad))) / g t = np.linspace(0, time_of_flight, num=500) x = initial_velocity * np.cos(angle_rad) * t y = initial_velocity * np.sin(angle_rad) * t - 0.5 * g * t**2 plt.plot(x, y, label=f'Angle: {angle}\u00b0') plt.title(f'Projectile Trajectories (Initial Velocity: {initial_velocity} m/s)') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.legend() plt.grid(True) plt.show() initial_velocity = 20 g = 9.81 angles = list(map(float, input(\"Enter angles separated by spaces (in degrees): \").split())) draw_trajectories(angles, initial_velocity, g) This code creates a graph that shows the trajectory of a projectile, when launched from different angles and with different initial speeds, you can enter these values \u200b\u200byourself. Also on this graph are 2 axes, distance and height, which show us exactly how high and far the projectile flew, here is the graph:","title":"Theoretical Basis: Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-basis-projectile-motion","text":"","title":"Theoretical Basis: Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-motion-of-a-projectile","text":"When a projectile (such as a ball, bullet, or rocket) is launched at an angle to the horizontal, it follows a parabolic trajectory. This occurs due to two forces: The horizontal velocity remains constant (if we don't take air resistance). The vertical velocity changes due to gravity.","title":"1. Motion of a Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-equations-of-motion","text":"","title":"Key Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-coordinate-x","text":"$$ x = v_0 \\cos(\\theta) t $$ where: - \\(v_0\\) is the initial velocity, - \\(\\theta\\) is the launch angle, - \\(t\\) is the time.","title":"Horizontal coordinate (x):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-coordinate-y","text":"\\[ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 \\] where: - \\(g\\) is the acceleration due to gravity (typically \\(9.81 \\text{ m/s}^2\\) ).","title":"Vertical coordinate (y):"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-range-of-flight-r","text":"The range is the horizontal distance traveled by the projectile before it lands. To find the range, we first determine the flight time (T), which is the time it takes for the projectile to return to the ground ( \\(y = 0\\) ): $$ T = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Now, substituting \\(T\\) into the equation for \\(x\\) : $$ R = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g} $$ Using the trigonometric identity \\(2 \\sin(\\theta) \\cos(\\theta) = \\sin(2\\theta)\\) , we get: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$","title":"2. Range of Flight (R)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-range-analysis-based-on-angle","text":"From the equation, we observe: Maximum range is achieved at \\(\\theta = 45^\\circ\\) , since \\(\\sin(2\\theta) = 1\\) . If the angle is too small ( \\(\\theta \\approx 0^\\circ\\) ), the projectile moves almost straight and falls nearby. If the angle is too large ( \\(\\theta \\approx 90^\\circ\\) ), the projectile moves mostly upward and lands almost at the launch point.","title":"3. Range Analysis Based on Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-python-code-for-simulation","text":"Also, to better understand projectile motion, I wrote a Python script that simulates and visualizes the trajectory of our projectile. The script plots the parabolic path of a projectile based on different launch angles and initial velocities, which you can write by yourself. It uses the matplotlib and numpy libraries to generate the graphs. Here is the code: import numpy as np import matplotlib.pyplot as plt def draw_trajectories(angles, initial_velocity, g): plt.figure(figsize=(10, 5)) for angle in angles: angle_rad = np.radians(angle) time_of_flight = (2 * (initial_velocity * np.sin(angle_rad))) / g t = np.linspace(0, time_of_flight, num=500) x = initial_velocity * np.cos(angle_rad) * t y = initial_velocity * np.sin(angle_rad) * t - 0.5 * g * t**2 plt.plot(x, y, label=f'Angle: {angle}\u00b0') plt.title(f'Projectile Trajectories (Initial Velocity: {initial_velocity} m/s)') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.legend() plt.grid(True) plt.show() initial_velocity = 20 g = 9.81 angles = list(map(float, input(\"Enter angles separated by spaces (in degrees): \").split())) draw_trajectories(angles, initial_velocity, g) This code creates a graph that shows the trajectory of a projectile, when launched from different angles and with different initial speeds, you can enter these values \u200b\u200byourself. Also on this graph are 2 axes, distance and height, which show us exactly how high and far the projectile flew, here is the graph:","title":"4. Python code for simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}